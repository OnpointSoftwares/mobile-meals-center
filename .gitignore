# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the .idea directory in version control.
.idea/

# VS Code
.vscode/

# Django specific
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Static files (collected)
/staticfiles/
/static/

# Media files
/media/

# Secret keys and sensitive data
.env
.env.local
.env.production
secrets.json

# Database
*.db
*.sqlite
*.sqlite3

# Migrations (optional - uncomment if you want to ignore migrations)
# */migrations/*
# !*/migrations/__init__.py

# Node.js (if using npm/yarn for frontend assets)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Sass
.sass-cache/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Backup files
*.bak
*.backup
*.orig

# Temporary files
*.tmp
*.temp

# Editor files
*~
*.swp
*.swo

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next

# Nuxt.js build output
.nuxt

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Local configuration
local_config.py

# Stripe test keys (if accidentally committed)
stripe_keys.txt

# Email test files
email_test.html

# Deployment files
deploy.sh
deployment/

# Docker
.dockerignore
docker-compose.override.yml

# Kubernetes
k8s/secrets/

# Terraform
*.tfstate
*.tfstate.*
.terraform/

# IDE
*.sublime-project
*.sublime-workspace

# Pytest
.pytest_cache/

# Jupyter
.jupyter/

# IPython
.ipython/

# Celery
celerybeat-schedule.db

# Redis dump file
dump.rdb

# Elasticsearch
elasticsearch/

# Memcached
memcached/

# Local development
local/
dev/

# Production settings
production_settings.py

# SSL certificates
*.pem
*.key
*.crt

# Backup databases
*.sql
*.dump

# Cache
.cache/

# Thumbnails
thumbs/

# User uploads (if not using cloud storage)
uploads/

# Compiled CSS/JS (if using build tools)
dist/
build/

# Package managers
package-lock.json
yarn.lock

# Python virtual environments
.Python
pyvenv.cfg

# Gunicorn
gunicorn.pid

# uWSGI
uwsgi.ini

# Nginx
nginx.conf

# Apache
.htaccess

# Let's Encrypt
.well-known/

# Monitoring
newrelic.ini

# Sentry
.sentryclirc

# Heroku
.heroku/

# Railway
.railway/

# Vercel
.vercel/

# Netlify
.netlify/

# AWS
.aws/

# Google Cloud
.gcloud/

# Azure
.azure/
